// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductCatalog.DAL;

#nullable disable

namespace ProductCatalog.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231013220140_AddUsers")]
    partial class AddUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e1110812-5f76-4889-93a7-b4c677c2d8dd",
                            ConcurrencyStamp = "ccf82068-a98c-4744-82a5-2bedcbb7f565",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "beea0094-0cde-4f04-812b-98c02f4f8e27",
                            ConcurrencyStamp = "c1a1ec7e-25fa-4ff3-92f9-88ecf33fb4ba",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "056096da-3246-40a7-af6f-726f5f4a74ee",
                            ConcurrencyStamp = "923594d9-e007-4845-9264-1a51a7c7c93c",
                            Name = "AdvancedUser",
                            NormalizedName = "ADVANCEDUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2288a9b4-35ee-4c13-b863-36184e701e0a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a795af17-0139-4f9d-9221-736ab3ebe038",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKD4WQNvNmjHS8gpZxvAvwue4W2cRYBPCO2tgz6PrrUDRTT4kaK5oW6sl0V5waAsdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9e4b045-8fff-4e03-9c27-cbbceb84128b",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "5eb5d348-b220-4148-8f9b-570de6262aa8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6367f8f4-da04-4d52-ac98-7dc778f60540",
                            Email = "user1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            NormalizedUserName = "USER1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJDJjnV5zTRm2uyk3zsX2i9nxxYvRzNaZGB9ggOvFlEgg5ZHhBpoZ4EeKXJyiDPJrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19cf6ac8-5af2-4137-81d5-1fd787c97999",
                            TwoFactorEnabled = false,
                            UserName = "user1@gmail.com"
                        },
                        new
                        {
                            Id = "3758bb9b-3ad6-457c-9ff5-c88f338c7d48",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ee6561b-eeac-445c-9a05-c74775edb0ec",
                            Email = "user2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHoRuKNEHKSUqRV3aF2VhptvuA3jXpHKYhKjrejWWLPFg2ZD3e1JyMB+GymZKzHdPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc0a4799-29c9-4165-a5f2-cfa21d3d65e7",
                            TwoFactorEnabled = false,
                            UserName = "user2@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2288a9b4-35ee-4c13-b863-36184e701e0a",
                            RoleId = "e1110812-5f76-4889-93a7-b4c677c2d8dd"
                        },
                        new
                        {
                            UserId = "5eb5d348-b220-4148-8f9b-570de6262aa8",
                            RoleId = "beea0094-0cde-4f04-812b-98c02f4f8e27"
                        },
                        new
                        {
                            UserId = "3758bb9b-3ad6-457c-9ff5-c88f338c7d48",
                            RoleId = "056096da-3246-40a7-af6f-726f5f4a74ee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductCatalog.DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("027ab076-461c-4f42-a09b-e052b818aa57"),
                            Name = "Category 1"
                        },
                        new
                        {
                            Id = new Guid("a71fe02a-a524-49ee-9f26-d156c0b62d6c"),
                            Name = "Category 2"
                        },
                        new
                        {
                            Id = new Guid("d4490f24-d752-458f-b324-a604e79b2f2e"),
                            Name = "Category 3"
                        });
                });

            modelBuilder.Entity("ProductCatalog.DAL.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SpecialNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86ca08b6-3b59-4046-9c3f-260f0631ceb8"),
                            CategoryId = new Guid("027ab076-461c-4f42-a09b-e052b818aa57"),
                            Description = "This is a description for product 1",
                            GeneralNote = "Sale",
                            Name = "Product 1",
                            Price = 10000m,
                            SpecialNote = "Oversalted"
                        },
                        new
                        {
                            Id = new Guid("75ac7087-0031-4895-8a7c-60e87b96a5d7"),
                            CategoryId = new Guid("027ab076-461c-4f42-a09b-e052b818aa57"),
                            Description = "This is a description for product 2",
                            GeneralNote = "Sale",
                            Name = "Product 2",
                            Price = 20000m,
                            SpecialNote = "Oversalted"
                        },
                        new
                        {
                            Id = new Guid("7cda37ad-0d0a-4685-8104-3f435f5eeaf6"),
                            CategoryId = new Guid("a71fe02a-a524-49ee-9f26-d156c0b62d6c"),
                            Description = "This is a description for product 3",
                            GeneralNote = "Sale",
                            Name = "Product 3",
                            Price = 30000m,
                            SpecialNote = "Tasty"
                        },
                        new
                        {
                            Id = new Guid("15fbac63-871c-4eb5-bcaa-900179d7d8e4"),
                            CategoryId = new Guid("a71fe02a-a524-49ee-9f26-d156c0b62d6c"),
                            Description = "This is a description for product 4",
                            GeneralNote = "Sale",
                            Name = "Product 4",
                            Price = 15000m,
                            SpecialNote = "Cold"
                        },
                        new
                        {
                            Id = new Guid("b06cc374-2161-474b-bd67-469ab1e757bf"),
                            CategoryId = new Guid("d4490f24-d752-458f-b324-a604e79b2f2e"),
                            Description = "This is a description for product 5",
                            GeneralNote = "Sale",
                            Name = "Product 5",
                            Price = 45000m,
                            SpecialNote = "Warm"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductCatalog.DAL.Entities.Product", b =>
                {
                    b.HasOne("ProductCatalog.DAL.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProductCatalog.DAL.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
